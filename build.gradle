buildscript {
	ext {
		cleanArchitectureVersion = '3.24.0'
		springBootVersion = '3.5.4'
		sonarVersion = '6.2.0.5505'
		jacocoVersion = '0.8.13'
		pitestVersion = '1.19.0-rc.1'
        lombokVersion = '1.18.38'
        mapstructVersion = '1.6.3'
	}
}

plugins {
	id 'co.com.bancolombia.cleanArchitecture' version "${cleanArchitectureVersion}"
	id 'org.springframework.boot' version "${springBootVersion}" apply false
	id 'info.solidsoft.pitest' version "${pitestVersion}" apply false
	id 'org.sonarqube' version "${sonarVersion}"
	id 'jacoco'
}

sonar {
    def modules = subprojects.projectDir.collect { "${it.toString().replace(project.projectDir.toString() + "/", "")}" }
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.modules", "${modules.join(',')}"
        property "sonar.sources", "src,deployment,settings.gradle,main.gradle,build.gradle,${modules.collect { "${it}/build.gradle" }.join(',')}"
        property "sonar.exclusions","**/MainApplication.java"
        property "sonar.tests", "src/test"
        property "sonar.java.binaries", "**/build/classes/java/main"
        property "sonar.junit.reportsPath", "**/build/test-results/test"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacocoMergedReport/jacocoMergedReport.xml"
        property "sonar.pitest.reportPaths", "build/reports/pitest/mutations.xml"
        property "sonar.externalIssuesReportPaths", "build/issues.json"
    }
}

// --- Define la lista de exclusiones UNA SOLA VEZ ---
def jacocoExclusionPatterns = [
        'co/com/crediya/MainApplication.class',
        'co/com/crediya/config/**',
        '**/*Application*',
        '**/config/**',
        '**/dto/**',
        '**/mapper/**',
        '**/generated/**'
]

// Tarea para generar el informe de cobertura unificado
tasks.register('jacocoRootReport', JacocoReport) {
    group = "Verification"
    description = "Generates an aggregate JaCoCo test coverage report."

    executionData.from(fileTree(project.rootDir).include("**/build/jacoco/*.exec"))
    sourceDirectories.from(files(subprojects.sourceSets.main.allSource.srcDirs))

    // --- AQUÍ APLICAMOS LAS EXCLUSIONES ---
    classDirectories.setFrom(files(subprojects.sourceSets.main.output).collect {
        fileTree(dir: it, exclude: jacocoExclusionPatterns)
    })

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

// Tarea para verificar la cobertura mínima
tasks.register('jacocoRootCoverageVerification', JacocoCoverageVerification) {
    group = "Verification"
    description = "Verifies JaCoCo test coverage minimums."
    dependsOn jacocoRootReport

    executionData.from(fileTree(project.rootDir).include("**/build/jacoco/*.exec"))
    sourceDirectories.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(subprojects.sourceSets.main.output))

    violationRules {
        rule {
            element = 'CLASS'
            // --- AQUÍ REUTILIZAMOS LA MISMA LISTA DE EXCLUSIONES ---
            excludes = jacocoExclusionPatterns.collect { it.replace('/', '.').replace('**', '') }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
        }
    }
}

// Haz que la tarea 'build' dependa de la verificación de cobertura
tasks.named('build') {
    dependsOn jacocoRootCoverageVerification
}

apply from: './main.gradle'
